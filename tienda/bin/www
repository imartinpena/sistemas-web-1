#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('expresslogin:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * SOCKET
 */

// Array global para almacenar mensajes en memoria
let mensajes = [];

const io = require('socket.io')(server);

io.on('connection', (socket) => {
  console.log('A user connected');

  // Enviar el historial de mensajes al nuevo usuario
  socket.emit('chat history', mensajes);

  // Cuando recibas un mensaje 'chat message', lo almacenarás y lo emitirás a todos los clientes.
  socket.on('chat message', (data) => {
    const nuevoMensaje = {
      username: data.username,
      message: data.message,
      timestamp: new Date().toLocaleString()
    };

    mensajes.push(nuevoMensaje); // Almacenar mensaje en memoria

    io.emit('chat message', nuevoMensaje); // Emitir mensaje a todos los clientes
  });

  socket.on('disconnect', () => {
    console.log('A user disconnected');
  });
});

server.listen(port, () => {
  console.log('Server is running on port 3000');
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}